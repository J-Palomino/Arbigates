{
  "address": "0xeD77EfDB6f4f8F0811852E3BF3CB8DD97F19c1f0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "Created",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_conditions",
          "type": "bytes"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "conditions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "getMessageHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x4e489d84c0b33854a2496535eb190b4bcff4154d324dad79c74aed7f51031750",
  "receipt": {
    "to": null,
    "from": "0xA4B7CEe8409673624EC9B075f5A4f9b8EbAdEd49",
    "contractAddress": "0xeD77EfDB6f4f8F0811852E3BF3CB8DD97F19c1f0",
    "transactionIndex": 0,
    "gasUsed": "396241",
    "logsBloom": "0x
    "blockHash": "0xadc46d972e6464d404d6a45a15312850f2d1dc65e5f85a2303a5bb792fc8a5e4",
    "transactionHash": "0x4e489d84c0b33854a2496535eb190b4bcff4154d324dad79c74aed7f51031750",
    "logs": [],
    "blockNumber": 1784884,
    "cumulativeGasUsed": "396241",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4882b3547c957b96506aa45ad6c6c785",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"Created\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_conditions\",\"type\":\"bytes\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"conditions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Gates.sol\":\"Gates\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Gates.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\ncontract Gates {\\n    uint256 count = 0;\\n    mapping(uint256 => bytes) public conditions;\\n\\n    event Created(uint256 requestId);\\n\\n    function add(bytes calldata _conditions) public {\\n        conditions[count] = _conditions;\\n        emit Created(count);\\n        count++;\\n    }\\n\\n    function getMessageHash(uint256 requestId) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(requestId));\\n    }\\n\\n    function getEthSignedMessageHash(bytes32 _messageHash)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        /*\\n        Signature is produced by signing a keccak256 hash with the following format:\\n        \\\"\\\\x19Ethereum Signed Message\\\\n\\\" + len(msg) + msg\\n        */\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    '\\\\x19Ethereum Signed Message:\\\\n32',\\n                    _messageHash\\n                )\\n            );\\n    }\\n\\n    function verify(\\n        address _signer,\\n        uint256 requestId,\\n        bytes memory signature\\n    ) internal pure returns (bool) {\\n        bytes32 messageHash = getMessageHash(requestId);\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n\\n        return recoverSigner(ethSignedMessageHash, signature) == _signer;\\n    }\\n\\n    function recoverSigner(\\n        bytes32 _ethSignedMessageHash,\\n        bytes memory _signature\\n    ) internal pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n\\n    function splitSignature(bytes memory sig)\\n        internal\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        require(sig.length == 65, 'invalid signature length');\\n\\n        assembly {\\n            /*\\n            First 32 bytes stores the length of the signature\\n\\n            add(sig, 32) = pointer of sig + 32\\n            effectively, skips first 32 bytes of signature\\n\\n            mload(p) loads next 32 bytes starting at the memory address p into memory\\n            */\\n\\n            // first 32 bytes, after the length prefix\\n            r := mload(add(sig, 32))\\n            // second 32 bytes\\n            s := mload(add(sig, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        // implicitly return (r, s, v)\\n    }\\n}\\n\",\"keccak256\":\"0xeb1347a60f6c1b9a6dfb4d4e39caceb9b476d0fda4a5ed0c6fdc81ef95fe2e11\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000805534801561001457600080fd5b5061062e806100246000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806326c5000714610046578063ba65811114610076578063ba86a10d14610092575b600080fd5b610060600480360381019061005b91906102ed565b6100c2565b60405161006d91906103b3565b60405180910390f35b610090600480360381019061008b919061043a565b610162565b005b6100ac60048036038101906100a791906102ed565b6101da565b6040516100b991906104a0565b60405180910390f35b600160205280600052604060002060009150905080546100e1906104ea565b80601f016020809104026020016040519081016040528092919081815260200182805461010d906104ea565b801561015a5780601f1061012f5761010080835404028352916020019161015a565b820191906000526020600020905b81548152906001019060200180831161013d57829003601f168201915b505050505081565b81816001600080548152602001908152602001600020919061018592919061020a565b507f06acbfb32bcf8383f3b0a768b70ac9ec234ea0f2d3b9c77fa6a2de69b919aad16000546040516101b7919061052a565b60405180910390a16000808154809291906101d190610574565b91905055505050565b6000816040516020016101ed91906105dd565b604051602081830303815290604052805190602001209050919050565b828054610216906104ea565b90600052602060002090601f016020900481019282610238576000855561027f565b82601f1061025157803560ff191683800117855561027f565b8280016001018555821561027f579182015b8281111561027e578235825591602001919060010190610263565b5b50905061028c9190610290565b5090565b5b808211156102a9576000816000905550600101610291565b5090565b600080fd5b600080fd5b6000819050919050565b6102ca816102b7565b81146102d557600080fd5b50565b6000813590506102e7816102c1565b92915050565b600060208284031215610303576103026102ad565b5b6000610311848285016102d8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610354578082015181840152602081019050610339565b83811115610363576000848401525b50505050565b6000601f19601f8301169050919050565b60006103858261031a565b61038f8185610325565b935061039f818560208601610336565b6103a881610369565b840191505092915050565b600060208201905081810360008301526103cd818461037a565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126103fa576103f96103d5565b5b8235905067ffffffffffffffff811115610417576104166103da565b5b602083019150836001820283011115610433576104326103df565b5b9250929050565b60008060208385031215610451576104506102ad565b5b600083013567ffffffffffffffff81111561046f5761046e6102b2565b5b61047b858286016103e4565b92509250509250929050565b6000819050919050565b61049a81610487565b82525050565b60006020820190506104b56000830184610491565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061050257607f821691505b602082108103610515576105146104bb565b5b50919050565b610524816102b7565b82525050565b600060208201905061053f600083018461051b565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061057f826102b7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036105b1576105b0610545565b5b600182019050919050565b6000819050919050565b6105d76105d2826102b7565b6105bc565b82525050565b60006105e982846105c6565b6020820191508190509291505056fea26469706673582212201efc4080404a19e38723f78464d86b730f16815420d947d38b6bde24f18d43d464736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806326c5000714610046578063ba65811114610076578063ba86a10d14610092575b600080fd5b610060600480360381019061005b91906102ed565b6100c2565b60405161006d91906103b3565b60405180910390f35b610090600480360381019061008b919061043a565b610162565b005b6100ac60048036038101906100a791906102ed565b6101da565b6040516100b991906104a0565b60405180910390f35b600160205280600052604060002060009150905080546100e1906104ea565b80601f016020809104026020016040519081016040528092919081815260200182805461010d906104ea565b801561015a5780601f1061012f5761010080835404028352916020019161015a565b820191906000526020600020905b81548152906001019060200180831161013d57829003601f168201915b505050505081565b81816001600080548152602001908152602001600020919061018592919061020a565b507f06acbfb32bcf8383f3b0a768b70ac9ec234ea0f2d3b9c77fa6a2de69b919aad16000546040516101b7919061052a565b60405180910390a16000808154809291906101d190610574565b91905055505050565b6000816040516020016101ed91906105dd565b604051602081830303815290604052805190602001209050919050565b828054610216906104ea565b90600052602060002090601f016020900481019282610238576000855561027f565b82601f1061025157803560ff191683800117855561027f565b8280016001018555821561027f579182015b8281111561027e578235825591602001919060010190610263565b5b50905061028c9190610290565b5090565b5b808211156102a9576000816000905550600101610291565b5090565b600080fd5b600080fd5b6000819050919050565b6102ca816102b7565b81146102d557600080fd5b50565b6000813590506102e7816102c1565b92915050565b600060208284031215610303576103026102ad565b5b6000610311848285016102d8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610354578082015181840152602081019050610339565b83811115610363576000848401525b50505050565b6000601f19601f8301169050919050565b60006103858261031a565b61038f8185610325565b935061039f818560208601610336565b6103a881610369565b840191505092915050565b600060208201905081810360008301526103cd818461037a565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126103fa576103f96103d5565b5b8235905067ffffffffffffffff811115610417576104166103da565b5b602083019150836001820283011115610433576104326103df565b5b9250929050565b60008060208385031215610451576104506102ad565b5b600083013567ffffffffffffffff81111561046f5761046e6102b2565b5b61047b858286016103e4565b92509250509250929050565b6000819050919050565b61049a81610487565b82525050565b60006020820190506104b56000830184610491565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061050257607f821691505b602082108103610515576105146104bb565b5b50919050565b610524816102b7565b82525050565b600060208201905061053f600083018461051b565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061057f826102b7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036105b1576105b0610545565b5b600182019050919050565b6000819050919050565b6105d76105d2826102b7565b6105bc565b82525050565b60006105e982846105c6565b6020820191508190509291505056fea26469706673582212201efc4080404a19e38723f78464d86b730f16815420d947d38b6bde24f18d43d464736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4,
        "contract": "contracts/Gates.sol:Gates",
        "label": "count",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8,
        "contract": "contracts/Gates.sol:Gates",
        "label": "conditions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      }
    ],
    "types": {
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}