{
  "address": "0x4e177c7142f9b75440AfB5De65ED72270E3dEa61",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gateId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "Created",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_conditions",
          "type": "bytes"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "conditions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "gates",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4a01f891e53736ee4b7401ab2302a8379076b25fbd2565d57ec66f8800af5940",
  "receipt": {
    "to": null,
    "from": "0xA4B7CEe8409673624EC9B075f5A4f9b8EbAdEd49",
    "contractAddress": "0x4e177c7142f9b75440AfB5De65ED72270E3dEa61",
    "transactionIndex": 1,
    "gasUsed": "414752",
    "logsBloom": "0x
    "blockHash": "0x5f937cee5a957da9f306b351fb6404e7215baf7d52059682ae8112488fc23da3",
    "transactionHash": "0x4a01f891e53736ee4b7401ab2302a8379076b25fbd2565d57ec66f8800af5940",
    "logs": [],
    "blockNumber": 681541,
    "cumulativeGasUsed": "414752",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dd38e28c16f541b2bf1cdc90bf69256e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"Created\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_conditions\",\"type\":\"bytes\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"conditions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"gates\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Gates.sol\":\"Gates\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"contracts/Gates.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\nimport {MerkleProof} from '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';\\n\\ncontract Gates {\\n    uint256 count = 0;\\n    mapping(uint256 => bytes) public conditions;\\n    mapping(bytes32 => bytes32) public gates;\\n\\n    event Created(uint256 gateId, address creator);\\n\\n    function add(bytes calldata _conditions) public {\\n        conditions[count] = _conditions;\\n        emit Created(count, msg.sender);\\n        count++;\\n    }\\n\\n    // function verify(address user, bytes32 snapshotId)\\n    //     public\\n    //     view\\n    //     returns (bool)\\n    // {\\n    //     bytes32 leaf = keccak256(abi.encodePacked(user));\\n    //     bool isValidLeaf = MerkleProof.verify(proof, merkleRoot, leaf);\\n    // }\\n\\n    // function createSnapShot(uint256 gateId, bytes32 merkle) public {\\n    //     bytes32 id = keccak256(abi.encodePacked(gateId, msg.sender));\\n    //     id = bytes20(keccak256(msg.sender, gateId));\\n    //     gates[id] = merkle;\\n    // }\\n}\\n\",\"keccak256\":\"0x03872fb4ddb9b6dbbc65e6738a4fae1b53f639e55854a4fda3663f91e423a3b2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000805534801561001457600080fd5b50610684806100246000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806326c50007146100465780633a7dbc1214610076578063ba658111146100a6575b600080fd5b610060600480360381019061005b91906102d7565b6100c2565b60405161006d919061039d565b60405180910390f35b610090600480360381019061008b91906103f5565b610162565b60405161009d9190610431565b60405180910390f35b6100c060048036038101906100bb91906104b1565b61017a565b005b600160205280600052604060002060009150905080546100e19061052d565b80601f016020809104026020016040519081016040528092919081815260200182805461010d9061052d565b801561015a5780601f1061012f5761010080835404028352916020019161015a565b820191906000526020600020905b81548152906001019060200180831161013d57829003601f168201915b505050505081565b60026020528060005260406000206000915090505481565b81816001600080548152602001908152602001600020919061019d9291906101f4565b507f7757890bcab34d673dfca6b71df1b57f75a2fe4231d6e8de726caf534ab1fdd6600054336040516101d19291906105ae565b60405180910390a16000808154809291906101eb90610606565b91905055505050565b8280546102009061052d565b90600052602060002090601f0160209004810192826102225760008555610269565b82601f1061023b57803560ff1916838001178555610269565b82800160010185558215610269579182015b8281111561026857823582559160200191906001019061024d565b5b509050610276919061027a565b5090565b5b8082111561029357600081600090555060010161027b565b5090565b600080fd5b600080fd5b6000819050919050565b6102b4816102a1565b81146102bf57600080fd5b50565b6000813590506102d1816102ab565b92915050565b6000602082840312156102ed576102ec610297565b5b60006102fb848285016102c2565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561033e578082015181840152602081019050610323565b8381111561034d576000848401525b50505050565b6000601f19601f8301169050919050565b600061036f82610304565b610379818561030f565b9350610389818560208601610320565b61039281610353565b840191505092915050565b600060208201905081810360008301526103b78184610364565b905092915050565b6000819050919050565b6103d2816103bf565b81146103dd57600080fd5b50565b6000813590506103ef816103c9565b92915050565b60006020828403121561040b5761040a610297565b5b6000610419848285016103e0565b91505092915050565b61042b816103bf565b82525050565b60006020820190506104466000830184610422565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126104715761047061044c565b5b8235905067ffffffffffffffff81111561048e5761048d610451565b5b6020830191508360018202830111156104aa576104a9610456565b5b9250929050565b600080602083850312156104c8576104c7610297565b5b600083013567ffffffffffffffff8111156104e6576104e561029c565b5b6104f28582860161045b565b92509250509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061054557607f821691505b602082108103610558576105576104fe565b5b50919050565b610567816102a1565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105988261056d565b9050919050565b6105a88161058d565b82525050565b60006040820190506105c3600083018561055e565b6105d0602083018461059f565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610611826102a1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610643576106426105d7565b5b60018201905091905056fea2646970667358221220ebb2b3269591785090e85eef9879dd0ab8b621b645c5d45bcfe02a671ad355ca64736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806326c50007146100465780633a7dbc1214610076578063ba658111146100a6575b600080fd5b610060600480360381019061005b91906102d7565b6100c2565b60405161006d919061039d565b60405180910390f35b610090600480360381019061008b91906103f5565b610162565b60405161009d9190610431565b60405180910390f35b6100c060048036038101906100bb91906104b1565b61017a565b005b600160205280600052604060002060009150905080546100e19061052d565b80601f016020809104026020016040519081016040528092919081815260200182805461010d9061052d565b801561015a5780601f1061012f5761010080835404028352916020019161015a565b820191906000526020600020905b81548152906001019060200180831161013d57829003601f168201915b505050505081565b60026020528060005260406000206000915090505481565b81816001600080548152602001908152602001600020919061019d9291906101f4565b507f7757890bcab34d673dfca6b71df1b57f75a2fe4231d6e8de726caf534ab1fdd6600054336040516101d19291906105ae565b60405180910390a16000808154809291906101eb90610606565b91905055505050565b8280546102009061052d565b90600052602060002090601f0160209004810192826102225760008555610269565b82601f1061023b57803560ff1916838001178555610269565b82800160010185558215610269579182015b8281111561026857823582559160200191906001019061024d565b5b509050610276919061027a565b5090565b5b8082111561029357600081600090555060010161027b565b5090565b600080fd5b600080fd5b6000819050919050565b6102b4816102a1565b81146102bf57600080fd5b50565b6000813590506102d1816102ab565b92915050565b6000602082840312156102ed576102ec610297565b5b60006102fb848285016102c2565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561033e578082015181840152602081019050610323565b8381111561034d576000848401525b50505050565b6000601f19601f8301169050919050565b600061036f82610304565b610379818561030f565b9350610389818560208601610320565b61039281610353565b840191505092915050565b600060208201905081810360008301526103b78184610364565b905092915050565b6000819050919050565b6103d2816103bf565b81146103dd57600080fd5b50565b6000813590506103ef816103c9565b92915050565b60006020828403121561040b5761040a610297565b5b6000610419848285016103e0565b91505092915050565b61042b816103bf565b82525050565b60006020820190506104466000830184610422565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126104715761047061044c565b5b8235905067ffffffffffffffff81111561048e5761048d610451565b5b6020830191508360018202830111156104aa576104a9610456565b5b9250929050565b600080602083850312156104c8576104c7610297565b5b600083013567ffffffffffffffff8111156104e6576104e561029c565b5b6104f28582860161045b565b92509250509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061054557607f821691505b602082108103610558576105576104fe565b5b50919050565b610567816102a1565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105988261056d565b9050919050565b6105a88161058d565b82525050565b60006040820190506105c3600083018561055e565b6105d0602083018461059f565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610611826102a1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610643576106426105d7565b5b60018201905091905056fea2646970667358221220ebb2b3269591785090e85eef9879dd0ab8b621b645c5d45bcfe02a671ad355ca64736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 508,
        "contract": "contracts/Gates.sol:Gates",
        "label": "count",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 512,
        "contract": "contracts/Gates.sol:Gates",
        "label": "conditions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      },
      {
        "astId": 516,
        "contract": "contracts/Gates.sol:Gates",
        "label": "gates",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}