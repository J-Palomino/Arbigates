/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Gates, GatesInterface } from "../Gates";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "Created",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_conditions",
        type: "bytes",
      },
    ],
    name: "add",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "conditions",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "getMessageHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000805534801561001457600080fd5b5061062e806100246000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806326c5000714610046578063ba65811114610076578063ba86a10d14610092575b600080fd5b610060600480360381019061005b91906102ed565b6100c2565b60405161006d91906103b3565b60405180910390f35b610090600480360381019061008b919061043a565b610162565b005b6100ac60048036038101906100a791906102ed565b6101da565b6040516100b991906104a0565b60405180910390f35b600160205280600052604060002060009150905080546100e1906104ea565b80601f016020809104026020016040519081016040528092919081815260200182805461010d906104ea565b801561015a5780601f1061012f5761010080835404028352916020019161015a565b820191906000526020600020905b81548152906001019060200180831161013d57829003601f168201915b505050505081565b81816001600080548152602001908152602001600020919061018592919061020a565b507f06acbfb32bcf8383f3b0a768b70ac9ec234ea0f2d3b9c77fa6a2de69b919aad16000546040516101b7919061052a565b60405180910390a16000808154809291906101d190610574565b91905055505050565b6000816040516020016101ed91906105dd565b604051602081830303815290604052805190602001209050919050565b828054610216906104ea565b90600052602060002090601f016020900481019282610238576000855561027f565b82601f1061025157803560ff191683800117855561027f565b8280016001018555821561027f579182015b8281111561027e578235825591602001919060010190610263565b5b50905061028c9190610290565b5090565b5b808211156102a9576000816000905550600101610291565b5090565b600080fd5b600080fd5b6000819050919050565b6102ca816102b7565b81146102d557600080fd5b50565b6000813590506102e7816102c1565b92915050565b600060208284031215610303576103026102ad565b5b6000610311848285016102d8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610354578082015181840152602081019050610339565b83811115610363576000848401525b50505050565b6000601f19601f8301169050919050565b60006103858261031a565b61038f8185610325565b935061039f818560208601610336565b6103a881610369565b840191505092915050565b600060208201905081810360008301526103cd818461037a565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126103fa576103f96103d5565b5b8235905067ffffffffffffffff811115610417576104166103da565b5b602083019150836001820283011115610433576104326103df565b5b9250929050565b60008060208385031215610451576104506102ad565b5b600083013567ffffffffffffffff81111561046f5761046e6102b2565b5b61047b858286016103e4565b92509250509250929050565b6000819050919050565b61049a81610487565b82525050565b60006020820190506104b56000830184610491565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061050257607f821691505b602082108103610515576105146104bb565b5b50919050565b610524816102b7565b82525050565b600060208201905061053f600083018461051b565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061057f826102b7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036105b1576105b0610545565b5b600182019050919050565b6000819050919050565b6105d76105d2826102b7565b6105bc565b82525050565b60006105e982846105c6565b6020820191508190509291505056fea26469706673582212201efc4080404a19e38723f78464d86b730f16815420d947d38b6bde24f18d43d464736f6c634300080e0033";

type GatesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GatesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Gates__factory extends ContractFactory {
  constructor(...args: GatesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Gates";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Gates> {
    return super.deploy(overrides || {}) as Promise<Gates>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Gates {
    return super.attach(address) as Gates;
  }
  connect(signer: Signer): Gates__factory {
    return super.connect(signer) as Gates__factory;
  }
  static readonly contractName: "Gates";
  public readonly contractName: "Gates";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GatesInterface {
    return new utils.Interface(_abi) as GatesInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Gates {
    return new Contract(address, _abi, signerOrProvider) as Gates;
  }
}
